{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Type for the slice state\n\n// Initial State using type\nconst initialState = {\n  contacts: []\n};\nconst contactSlice = createSlice({\n  name: \"contacts\",\n  initialState,\n  reducers: {\n    addContact: (state, action) => {\n      state.contacts.push(action.payload);\n    },\n    deleteContact: (state, action) => {\n      state.contacts = state.contacts.filter(contact => contact.id !== action.payload);\n    },\n    editContact: (state, action) => {\n      const index = state.contacts.findIndex(contact => contact.id === action.payload.id);\n      if (index !== -1) {\n        state.contacts[index] = action.payload;\n      }\n    },\n    toggleActive: (state, action) => {\n      const contact = state.contacts.find(contact => contact.id === action.payload);\n      if (contact) {\n        contact.isActive = !contact.isActive;\n      }\n    }\n  }\n});\nexport const {\n  addContact,\n  deleteContact,\n  editContact,\n  toggleActive\n} = contactSlice.actions;\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectContact = state => state.contacts.contacts;\nexport default contactSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","contacts","contactSlice","name","reducers","addContact","state","action","push","payload","deleteContact","filter","contact","id","editContact","index","findIndex","toggleActive","find","isActive","actions","selectContact","reducer"],"sources":["/Users/vinaykumar/Downloads/ReactTS_Contact_Visuals-main/src/app/contacts/contactSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"app/store\";\n\n// Type for the slice state\ninterface Contact {\n  id: string;\n  fName: string;\n  lName: string;\n  isActive: boolean;\n}\n\ninterface ContactState {\n  contacts: Contact[];\n}\n\n// Initial State using type\nconst initialState: ContactState = {\n  contacts: [],\n};\n\nconst contactSlice = createSlice({\n  name: \"contacts\",\n\n  initialState,\n  reducers: {\n    addContact: (state, action: PayloadAction<Contact>) => {\n      state.contacts.push(action.payload);\n    },\n    deleteContact: (state, action: PayloadAction<string>) => {\n      state.contacts = state.contacts.filter(\n        (contact) => contact.id !== action.payload\n      );\n    },\n    editContact: (state, action: PayloadAction<Contact>) => {\n      const index = state.contacts.findIndex(\n        (contact) => contact.id === action.payload.id\n      );\n      if (index !== -1) {\n        state.contacts[index] = action.payload;\n      }\n    },\n    toggleActive: (state, action: PayloadAction<string>) => {\n      const contact = state.contacts.find(\n        (contact) => contact.id === action.payload\n      );\n      if (contact) {\n        contact.isActive = !contact.isActive;\n      }\n    },\n  },\n});\n\nexport const { addContact, deleteContact, editContact, toggleActive } =\n  contactSlice.actions;\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectContact = (state: RootState) => state.contacts.contacts;\n\nexport default contactSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;;AAG7D;;AAYA;AACA,MAAMC,YAA0B,GAAG;EACjCC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAMC,YAAY,GAAGH,WAAW,CAAC;EAC/BI,IAAI,EAAE,UAAU;EAEhBH,YAAY;EACZI,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACL,QAAQ,CAACO,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IACrC,CAAC;IACDC,aAAa,EAAEA,CAACJ,KAAK,EAAEC,MAA6B,KAAK;MACvDD,KAAK,CAACL,QAAQ,GAAGK,KAAK,CAACL,QAAQ,CAACU,MAAM,CACnCC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKN,MAAM,CAACE,OACrC,CAAC;IACH,CAAC;IACDK,WAAW,EAAEA,CAACR,KAAK,EAAEC,MAA8B,KAAK;MACtD,MAAMQ,KAAK,GAAGT,KAAK,CAACL,QAAQ,CAACe,SAAS,CACnCJ,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAACI,EAC7C,CAAC;MACD,IAAIE,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBT,KAAK,CAACL,QAAQ,CAACc,KAAK,CAAC,GAAGR,MAAM,CAACE,OAAO;MACxC;IACF,CAAC;IACDQ,YAAY,EAAEA,CAACX,KAAK,EAAEC,MAA6B,KAAK;MACtD,MAAMK,OAAO,GAAGN,KAAK,CAACL,QAAQ,CAACiB,IAAI,CAChCN,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKN,MAAM,CAACE,OACrC,CAAC;MACD,IAAIG,OAAO,EAAE;QACXA,OAAO,CAACO,QAAQ,GAAG,CAACP,OAAO,CAACO,QAAQ;MACtC;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEd,UAAU;EAAEK,aAAa;EAAEI,WAAW;EAAEG;AAAa,CAAC,GACnEf,YAAY,CAACkB,OAAO;;AAEtB;AACA,OAAO,MAAMC,aAAa,GAAIf,KAAgB,IAAKA,KAAK,CAACL,QAAQ,CAACA,QAAQ;AAE1E,eAAeC,YAAY,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}